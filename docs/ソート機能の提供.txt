基本条件
	[ジョブコード][ジョブ名] の [降順][昇順]

例外条件(上から適用)
	[ジョブコード][ジョブ名] が [任意の値]
		と [一致する][一致しない] 場合
		を [含む][含まない] 場合
		で [始まる][終わる][始まらない][終わらない] 場合
	↓
	[現在の並びを維持したまま][基本条件を適用した上で]
	[[ジョブコード][ジョブ名] の [降順][昇順] を適用して]
	+
	[先頭に移動]
	[末尾に移動]

例外条件が -(ない)→ 基本条件を適用;
　↓(ある)
const 現在の並び = [], 先頭 = [], 末尾 = [];
for (例外条件) {
	const 例外条件を満たす要素 = [現在の並びから一致するものを取ってくる];
	ソートを適用(例外条件を満たす要素);
	先頭と末尾の配列に「例外条件を満たす要素」と同じ要素がある場合は、先頭・末尾から削除();
	// ↑現在の並びを維持したまま～ があるので、後者のソートを優先させたい
	if (先頭に移動) 先頭.unshift(例外条件を満たす要素);
	else if (末尾に移動) 末尾.push(例外条件を満たす要素);
	// ↑後者優先、より先頭に・より末尾に
}
現在の並びから、先頭と末尾に含まれる要素を消す();
現在の並びを基本条件でソート
先頭.concat(現在の並び, 末尾) の並び順を適用


上へ下へを押さなくていい。trを直接並び替える。